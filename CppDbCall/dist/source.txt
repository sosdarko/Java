PACKAGE BODY        "NPFESITEDATA" AS

  FUNCTION GetTextSize(
      pDeviceType              IN  VARCHAR2)
  RETURN VARCHAR2 DETERMINISTIC IS
  BEGIN
    case pDeviceType
      when 'I' then return 'L';
      when 'M' then return 'M';
      when 'B' then return 'S';
    else
      return null;
    end case;
  END GetTextSize;
  
  
  PROCEDURE GetSiteStyles(
      pIDMMWebsite             IN  NUMBER,
      pDeviceType              IN  VARCHAR2,
      pStyles                  OUT SYS_REFCURSOR,
      pResponseCode            OUT NUMBER,
      pInternalResponseMessage OUT VARCHAR2,
      pResponseMessage         OUT VARCHAR2,
      pProjectClass            IN  VARCHAR2 default 'PCI'
  ) IS
    eProcessingError  EXCEPTION;
    lTest             NUMBER(1);
  BEGIN
    pResponseCode := 0;
    pInternalResponseMessage := null;
    pResponseMessage := null;
    
    begin
      select 1
      into lTest
      from MMAS.MMWEBSITE
      where IDMMWEBSITE = pIDMMWebsite;
    exception
      when no_data_found then
        pResponseCode := 50102002;
        pInternalResponseMessage := 'Site with ID '||to_char(pIDMMWebsite)||' does not exist';
        raise eProcessingError;
    end;
    
    if pDeviceType not in ('I', 'M', 'B') then
      pResponseCode := 50102003;
      pInternalResponseMessage := 'Unknown device type: '||pDeviceType;
      raise eProcessingError;
    end if;
    
    open PSTYLES for
      select name, value from NPFEWEBSTYLES
      where
        IDMMWEBSITE = pIDMMWebsite and
        DEVICETYPE = pDeviceType and
        PROJECTCLASS = pProjectClass;
  EXCEPTION
    WHEN eProcessingError THEN
      FO.FOERRORHANDLER.FETCHCUSTOMERERRMSG(pResponseCode, pInternalResponseMessage, NULL, pResponseMessage);
    WHEN OTHERS THEN
      pResponseCode := 50102001;
      pInternalResponseMessage := sqlerrm||chr(10)||SYS.DBMS_UTILITY.FORMAT_ERROR_BACKTRACE();
      FO.FOERRORHANDLER.FETCHCUSTOMERERRMSG(pResponseCode, pInternalResponseMessage, NULL, pResponseMessage);
  END GetSiteStyles;

  PROCEDURE GetPageTranslations(
      pIDMMWebsite             IN  NUMBER,
      pIDWebpage               IN  NUMBER,
      pDeviceType              IN  VARCHAR2,
      pTranslations            OUT SYS_REFCURSOR,
      pResponseCode            OUT NUMBER,
      pInternalResponseMessage OUT VARCHAR2,
      pResponseMessage         OUT VARCHAR2 )
  IS
    lWebpageName              VARCHAR2(100);
    lIDFOTABLETRANSLATION     NUMBER;
    lIDFOTABLETRANSLATIONLANG NUMBER;
    lSize                     VARCHAR2(1);
    lIDFOLanguageAsked        VARCHAR2(10);
    
    eProcessingError  EXCEPTION;
  BEGIN
    pTranslations := null;
    pResponseCode := 0;
    pInternalResponseMessage := null;
    pResponseMessage := null;
    
    begin
      select P.NAME
      into lWebpageName
      from NPFE.NPFEWEBPAGE p
      where P.IDNPFEWEBPAGE = pIDWebpage;
    exception
      when no_data_found then
        pResponseCode := 50101005;
        pInternalResponseMessage := 'Provided page id '||to_char(pIDWebpage)||' does not exists';
        raise eProcessingError;
    end;
    
    begin
      select X.IDFOTABLETRANSLATION
      into lIDFOTABLETRANSLATION
      from FOTRAN.FOTABLETRANSLATION x
      where X.TABLENAME = 'NPFE.NPFEWEBLITERAL'
        and X.TRANSLATIONCOLUMN = 'VALUE'
        and X.NAME = lWebpageName;
    exception
      when no_data_found then
        pResponseCode := 50101004;
        pInternalResponseMessage := 'No table translation for web literals on page '||lWebpageName;
        raise eProcessingError;
    end;
    
    lSize := GetTextSize(pDeviceType);
    if lSize is null then
      pResponseCode := 50101003;
      pInternalResponseMessage := 'Unknown device type: '||pDeviceType;
      raise eProcessingError;
    end if;
    
    begin
      select IDFOLANGUAGE
      into lIDFOLanguageAsked
      from MMAS.MMWEBSITE
      where IDMMWEBSITE = pIDMMWebsite;
    exception
      when no_data_found then
        pResponseCode := 50101002;
        pInternalResponseMessage := 'Site with ID '||to_char(pIDMMWebsite)||' does not exist';
        raise eProcessingError;
    end;
    
    begin
      select trlan.IDFOTABLETRANSLATIONLANG
      into lIDFOTABLETRANSLATIONLANG
      from
        FOTRAN.FOTABLETRANSLATIONLANG trlan
      where
        trlan.IDFOTABLETRANSLATION = lIDFOTABLETRANSLATION and
        trlan.IDFOLANGUAGE = lIDFOLanguageAsked and
        trlan.ISTRANSLATED = 1;
    exception
      when no_data_found then
        
        begin
          select trlan.IDFOTABLETRANSLATIONLANG
          into lIDFOTABLETRANSLATIONLANG
          from
            FOTRAN.FOTABLETRANSLATIONLANG trlan
          where
            trlan.IDFOTABLETRANSLATION = lIDFOTABLETRANSLATION and
            trlan.IDFOLANGUAGE = 'EN';
        exception
          when no_data_found then
            pResponseCode := 50101005;
            pInternalResponseMessage := 'There is no translation for language '||lIDFOLanguageAsked||' and default text (EN) not found';
            raise eProcessingError;
        end;
    end;
    
    begin
      open pTranslations for
      select
        lit.NAME,
        case lSize
          
          when 'L' then NVL2(sitet.IDFOTABLETRANSLATIONTEXT, sitet.LARGETEXT, t.LARGETEXT)
          when 'M' then NVL2(sitet.IDFOTABLETRANSLATIONTEXT, sitet.MEDIUMTEXT, t.MEDIUMTEXT)
          when 'S' then NVL2(sitet.IDFOTABLETRANSLATIONTEXT, sitet.SMALLTEXT, t.SMALLTEXT)
        end text
      from
        FOTRAN.FOTABLETRANSLATIONTEXT t
        inner join NPFE.NPFEWEBLITERAL lit
          on (lit.IDNPFEWEBLITERAL = t.ORIGINALID_NUM)
        left join FOTRAN.FOTABLETRANSLATIONSITETEXT sitet
          on (sitet.IDFOTABLETRANSLATIONTEXT = t.IDFOTABLETRANSLATIONTEXT and sitet.IDMMWEBSITE = pIDMMWebsite)
      where
        t.IDFOTABLETRANSLATIONLANG = lIDFOTABLETRANSLATIONLANG and
        lit.IDNPFEWEBPAGE = pIDWebpage;
    end;
  EXCEPTION
    WHEN eProcessingError THEN
      FO.FOERRORHANDLER.FETCHCUSTOMERERRMSG(pResponseCode, pInternalResponseMessage, NULL, pResponseMessage);
    WHEN OTHERS THEN
      pResponseCode := 50101001;
      pInternalResponseMessage := sqlerrm||chr(10)||SYS.DBMS_UTILITY.FORMAT_ERROR_BACKTRACE();
      FO.FOERRORHANDLER.FETCHCUSTOMERERRMSG(pResponseCode, pInternalResponseMessage, NULL, pResponseMessage);
  END GetPageTranslations;

    
  PROCEDURE GetPageTranslations(
      pIDMMWebsite             IN  NUMBER,
      PWebpageName             IN  VARCHAR2,
      pDeviceType              IN  VARCHAR2,
      PTranslations            OUT SYS_REFCURSOR,
      pResponseCode            OUT NUMBER,
      pInternalResponseMessage OUT VARCHAR2,
      pResponseMessage         OUT VARCHAR2
  ) is
    lIDWebpage                NUMBER;
    lIDFOTABLETRANSLATION     NUMBER;
    lIDFOTABLETRANSLATIONLANG NUMBER;
    lSize                     VARCHAR2(1);
    lIDFOLanguageAsked        VARCHAR2(10);
    lCount number := 0;
    
    eProcessingError  EXCEPTION;
  BEGIN
    pTranslations := null;
    pResponseCode := 0;
    pInternalResponseMessage := null;
    pResponseMessage := null;
    
    begin
        select n.IDNPFEWEBPAGE
        into lIDWebpage
        from NPFE.NPFEWEBPAGE n
        where n.NAME = pWebpageName;
    exception
      when no_data_found then
        pResponseCode := 50103006;
        pInternalResponseMessage := 'Provided page '||to_char(pWebpageName)||' does not exists';
        raise eProcessingError;
    end;
    
    begin
      select X.IDFOTABLETRANSLATION
      into lIDFOTABLETRANSLATION
      from FOTRAN.FOTABLETRANSLATION x
      where X.TABLENAME = 'NPFE.NPFEWEBLITERAL'
        and X.TRANSLATIONCOLUMN = 'VALUE'
        and X.NAME = pWebpageName;
    exception
      when no_data_found then
        pResponseCode := 50103004;
        pInternalResponseMessage := 'No table translation for web literals on page '||pWebpageName;
        raise eProcessingError;
    end;
    
    lSize := GetTextSize(pDeviceType);
    if lSize is null then
      pResponseCode := 50103003;
      pInternalResponseMessage := 'Unknown device type: '||pDeviceType;
      raise eProcessingError;
    end if;
    
    begin
      select IDFOLANGUAGE
      into lIDFOLanguageAsked
      from MMAS.MMWEBSITE
      where IDMMWEBSITE = pIDMMWebsite;
    exception
      when no_data_found then
        pResponseCode := 50103002;
        pInternalResponseMessage := 'Site with ID '||to_char(pIDMMWebsite)||' does not exist';
        raise eProcessingError;
    end;
    
    begin
      select trlan.IDFOTABLETRANSLATIONLANG
      into lIDFOTABLETRANSLATIONLANG
      from
        FOTRAN.FOTABLETRANSLATIONLANG trlan
      where
        trlan.IDFOTABLETRANSLATION = lIDFOTABLETRANSLATION and
        trlan.IDFOLANGUAGE = lIDFOLanguageAsked and
        trlan.ISTRANSLATED = 1;
    exception
      when no_data_found then
        
        begin
          select trlan.IDFOTABLETRANSLATIONLANG
          into lIDFOTABLETRANSLATIONLANG
          from
            FOTRAN.FOTABLETRANSLATIONLANG trlan
          where
            trlan.IDFOTABLETRANSLATION = lIDFOTABLETRANSLATION and
            trlan.IDFOLANGUAGE = 'EN';
        exception
          when no_data_found then
            pResponseCode := 50103005;
            pInternalResponseMessage := 'There is no translation for language '||lIDFOLanguageAsked||' and default text (EN) not found';
            raise eProcessingError;
        end;
    end;
    
    begin
      open pTranslations for
      select
        lit.NAME,
        case lSize
          
          when 'L' then NVL2(sitet.IDFOTABLETRANSLATIONTEXT, sitet.LARGETEXT, t.LARGETEXT)
          when 'M' then NVL2(sitet.IDFOTABLETRANSLATIONTEXT, sitet.MEDIUMTEXT, t.MEDIUMTEXT)
          when 'S' then NVL2(sitet.IDFOTABLETRANSLATIONTEXT, sitet.SMALLTEXT, t.SMALLTEXT)
        end text
      from
        FOTRAN.FOTABLETRANSLATIONTEXT t
        inner join NPFE.NPFEWEBLITERAL lit
          on (lit.IDNPFEWEBLITERAL = t.ORIGINALID_NUM)
        left join FOTRAN.FOTABLETRANSLATIONSITETEXT sitet
          on (sitet.IDFOTABLETRANSLATIONTEXT = t.IDFOTABLETRANSLATIONTEXT and sitet.IDMMWEBSITE = pIDMMWebsite)
      where
        t.IDFOTABLETRANSLATIONLANG = lIDFOTABLETRANSLATIONLANG and
        lit.IDNPFEWEBPAGE = lIDWebpage;
    end;
  EXCEPTION
    WHEN eProcessingError THEN
      FO.FOERRORHANDLER.FETCHCUSTOMERERRMSG(pResponseCode, pInternalResponseMessage, NULL, pResponseMessage);
    WHEN OTHERS THEN
      pResponseCode := 50103001;
      pInternalResponseMessage := sqlerrm||chr(10)||SYS.DBMS_UTILITY.FORMAT_ERROR_BACKTRACE();
      FO.FOERRORHANDLER.FETCHCUSTOMERERRMSG(pResponseCode, pInternalResponseMessage, NULL, pResponseMessage);
  END GetPageTranslations;

  
  FUNCTION GetPageDataPL(
      pIDMMWebsite        IN  number,
      pDeviceType         IN  varchar2,
      pTxnType            IN  varchar2,
      pPaymentMethod      IN  varchar2,
      pPaymentProvider    IN  varchar2,
      pProjectClass       IN  varchar2 default 'NP',
      pAddConfigReasonID1 IN  varchar2 default null,
      pAddConfigReasonID2 IN  varchar2 default null
  )
  return NPFEStringSet
  pipelined
  IS
    out_rec varchar2(4000);
    lPayModelId varchar2(10);
    lFormId number;
    lFormName varchar2(50);
    lPageId number;
    lControlName varchar2(100);
    lIDNPFEPartialViewControl number;
    lUseDeviceType varchar2(2);
    lHaveSubmodel number(1);
    lnUdba number;
    
    function json_escape(str in varchar2) return varchar2
    is
    begin
      return(replace(replace(str, '\', '\\'), '"', '\"'));
    end;
  BEGIN
    udbash.LogEntry(
      lnUdba, 10,
      'NPFE', 
      'Package', 
      'NPFE.NPFESITEDATA.GetPageDataPL', 
      0, 
      ';pIDMMWebsite='||pIDMMWebsite
      ||';pDeviceType='||pDeviceType
      ||';pTxnType='||pTxnType
      ||';pPaymentMethod='||pPaymentMethod
      ||';pPaymentProvider='||pPaymentProvider
      ||';pProjectClass='||pProjectClass
      ||';pAddConfigReasonID1='||pAddConfigReasonID1
      ||';pAddConfigReasonID2='||pAddConfigReasonID2
      ,NULL, 
      NULL 
    );
    
    begin
      select IDNPFEPAYMENTMODEL, HAVESUBMODEL
      into lPayModelId, lHaveSubmodel
      from NPFEPAYMENTMODEL
      where
        IDMMPAYMENTMETHOD = pPaymentMethod and
        (
          (IDMMPAYMENTPROVIDER=pPaymentProvider) or
          (IDMMPAYMENTPROVIDER is null and pPaymentProvider is null)
        ) and
        TXTYPE = pTxnType;
    exception
      when no_data_found then
        raise_application_error(-20010, 'The payment model for given input parameters does not exists.');
        return;
    end;
    
    begin
      select IDNPFEWEBPAGE
      into lPageId
      from NPFEWEBPAGE
      where
        IDNPFEPAYMENTMODEL = lPayModelId;
    exception
      when no_data_found then
        raise_application_error(-20020, 'The web page for given input parameters does not exists.');
        lPageId := null;
    end;
    
    if pProjectClass = 'RSWEB' then
      lUseDeviceType := 'M';
    else
      lUseDeviceType := pDeviceType;
    end if;
    
    begin
      select IDNPFEFORM, FECLASS
      into lFormId, lFormName
      from NPFEFORM
      where
        IDNPFEPAYMENTMODEL = lPayModelId and
        IDMMWEBSITE = pIDMMWebsite and
        DEVICETYPE = lUseDeviceType;
    exception
      when no_data_found then
        raise_application_error(-20030,
          'The web form definition for PAYMENTMODEL='||lPayModelId
          ||';WEBSITE='||to_char(pIDMMWebsite)
          ||';DEVICETYPE='||lUseDeviceType
          ||' does not exists.');
        return;
    end;
    
    out_rec := '{"ListOfPartialViewModels": [';
    PIPE ROW(out_rec);
    
    out_rec := '{"Name": "'||lFormName||'", "ListOfProperties": [';
    PIPE ROW(out_rec);
    <<PROPERTIES>>
    for r_prop in (
        select
          pmp.IDNPFEPAYMENTMODELPARAM, pmp.IDNPFEPAYMENTPARAMTYPE,
          pmp.PPPARAMETERNAME, pmp.SOURCENAME,
          decode(pmp.ISPROVIDEDBYUSER, 1, pmp.SOURCENAME, null) PVNAME,
          pmp.ISSECURE, pmp.KEYPARAMETERNAME,
          pmp.FEVALIDATIONACTION
        from
          NPFEPAYMENTMODELPARAM pmp
        where
          pmp.IDNPFEPAYMENTMODEL = lPayModelId and
          pmp.SOURCENAME is not null)
    loop
      out_rec :=
        '{"Name": "'||r_prop.SOURCENAME||'"'
        ||',"ProviderParameterName": "'||r_prop.PPPARAMETERNAME||'"'
        ||',"PairedWithControl": "'||r_prop.PVNAME||'"';
      if r_prop.ISSECURE = 1 then
        out_rec := out_rec ||',"IsSecure": true, "SecureKeyParameterName": "'||r_prop.KEYPARAMETERNAME||'"';
      elsif r_prop.ISSECURE = 0 then
        out_rec := out_rec ||',"IsSecure": false, "SecureKeyParameterName": "'||r_prop.KEYPARAMETERNAME||'"';
      end if;
      out_rec := out_rec ||',"ListOfValidations": [';
      PIPE ROW(out_rec);
      <<VALIDATIONS>>
      for r_vld in (
          select
            V.FEATTRIBUTETYPE, V.IDNPFEVALIDATION, V.ERRORMESSAGE, 1 vldtype
          from
            NPFEVALIDATION v,
            NPFEPARAMTYPEVALIDATION ptv
          where
            PTV.IDNPFEVALIDATION = V.IDNPFEVALIDATION and
            PTV.IDNPFEPAYMENTPARAMTYPE = r_prop.IDNPFEPAYMENTPARAMTYPE
          union
          select
            V.FEATTRIBUTETYPE, V.IDNPFEVALIDATION, V.ERRORMESSAGE, 2
          from
            NPFEVALIDATION v,
            NPFEPayModelParamValidation pmpv
          where
            v.IDNPFEVALIDATION = pmpv.IDNPFEVALIDATION and
            pmpv.IDNPFEPAYMENTMODELPARAM = r_prop.IDNPFEPAYMENTMODELPARAM)
      loop
        out_rec :=
          '{"actionName": "'||r_prop.FEVALIDATIONACTION||'"'
          ||',"attributeType": "'||r_vld.FEATTRIBUTETYPE||'"'
          ||',"key": "ErrorMessage"'
          ||',"value": "'||r_vld.ERRORMESSAGE||'"'
          ||',"custParameter": [';
        PIPE ROW(out_rec);
        for r_vldpam in (
            select PARAMETERVALUE, PARAMETERSEQUENCE
            from NPFEPARAMTYPEVLDPARAMVALUE
            where
              IDNPFEVALIDATION = r_vld.IDNPFEVALIDATION and
              IDNPFEPAYMENTPARAMTYPE = r_prop.IDNPFEPAYMENTPARAMTYPE and
              r_vld.vldtype = 1
            union
            select PARAMETERVALUE, PARAMETERSEQUENCE
            from NPFEPAYMODELPARAMVLDPARAMVALUE
            where
              IDNPFEVALIDATION = r_vld.IDNPFEVALIDATION and
              IDNPFEPAYMENTMODELPARAM = r_prop.IDNPFEPAYMENTMODELPARAM and
              r_vld.vldtype = 2
            order by PARAMETERSEQUENCE)
        loop
          out_rec := '"'||r_vldpam.PARAMETERVALUE||'",';
          PIPE ROW(out_rec);
        end loop;
        out_rec := 'null]},';
        PIPE ROW(out_rec);
      end loop VALIDATIONS;
      out_rec := 'null]},';
      PIPE ROW(out_rec);
    end loop PROPERTIES;
    out_rec := 'null]}]';
    PIPE ROW(out_rec);
    
    out_rec := ', "ListOfPartialViewMetrics": [';
    PIPE ROW(out_rec);
    
    for r_met in (
        select
          PV.name, FPV.GRIDCOLUMNNUM, FPV.GRIDROWNUM, FPV.UNITCOUNT, FPV.SELECTOPTIONLISTSQL, FPV.PAIREDWITH
        from NPFEFORMPVMETRICS fpv, NPFEPARTIALVIEW pv
        where
          FPV.IDNPFEPARTIALVIEW = PV.IDNPFEPARTIALVIEW and
          FPV.IDNPFEFORM = lFormId)
    loop
      out_rec :=
        '{"Name": "'||r_met.name||'Metric"'
        ||',"pairedWith": "'||NVL(r_met.PairedWith,r_met.name)||'"'
        ||',"Type": '||nvl('"'||r_met.name||'"', 'null');
      PIPE ROW(out_rec);
      if r_met.SELECTOPTIONLISTSQL is not null then
        out_rec := ',"SelectOptionQuery": "'||r_met.SELECTOPTIONLISTSQL||'"';
        PIPE ROW(out_rec);
      end if;
      out_rec :=
        ',"RowNumber": '||to_char(r_met.GRIDROWNUM)
        ||',"ColumnNumber": '||to_char(r_met.GRIDCOLUMNNUM)
        ||',"UnitCount": '||to_char(r_met.UNITCOUNT)
        ||'},';
        PIPE ROW(out_rec);
    end loop;
    out_rec := 'null]';
    PIPE ROW(out_rec);
    

    if lHaveSubmodel = 1 then
      out_rec := ', "ListOfAdditionalPartialViewModels": [';
      PIPE ROW(out_rec);
      
      out_rec := '{"Name": "'||lFormName||'", "ListOfProperties": [';
      PIPE ROW(out_rec);
      <<SMPROPERTIES>>
      for r_prop in (
          select
            pv.name pvname, addpvm.PPPARAMETERNAME,
            addpvm.IDNPFEPAYMENTPARAMTYPE ,addpvm.FEVALIDATIONACTION, addpvm.ISREQUIRED
          from
            NPFE.NPFEADDITIONALCONFIGURATION addc,
            NPFE.NPFEADDITIONALPVMETRICS addpvm,
            NPFE.NPFEPARTIALVIEW pv
          where
            addc.IDNPFEPAYMENTMODEL = lPayModelId and
            
            addc.IDREASON1 = pAddConfigReasonID1 and
            
            (pAddConfigReasonID2 is null or addc.IDREASON2 = pAddConfigReasonID2) and
            addpvm.IDNPFEADDITIONALCONFIGURATION = addc.IDNPFEADDITIONALCONFIGURATION and
            pv.IDNPFEPARTIALVIEW = addpvm.IDNPFEPARTIALVIEW)
      loop
        out_rec :=
          '{"Name": "'||r_prop.PVNAME||'"'
          ||',"ProviderParameterName": "'||r_prop.PPPARAMETERNAME||'"'
          ||',"PairedWithControl": "'||r_prop.PVNAME||'"'
          ||',"ListOfValidations": [';
        PIPE ROW(out_rec);
        <<SMVALIDATIONS>>
        for r_vld in (
            select
              V.FEATTRIBUTETYPE, V.IDNPFEVALIDATION, V.ERRORMESSAGE, V.NAME
            from
              NPFEVALIDATION v
            where
              V.NAME = 'REQUIRED' and
              r_prop.ISREQUIRED = 1
            union
            select
              V.FEATTRIBUTETYPE, V.IDNPFEVALIDATION, V.ERRORMESSAGE, V.NAME
            from
              NPFEVALIDATION v, NPFEPARAMTYPEVALIDATION ptv
            where
              ptv.IDNPFEPAYMENTPARAMTYPE = r_prop.IDNPFEPAYMENTPARAMTYPE and
              ptv.IDNPFEVALIDATION = v.IDNPFEVALIDATION and
              (r_prop.ISREQUIRED=1 or V.NAME != 'REQUIRED'))
        loop
          out_rec :=
            '{"actionName": "'||r_prop.FEVALIDATIONACTION||'"'
            ||',"attributeType": "'||r_vld.FEATTRIBUTETYPE||'"'
            ||',"key": "ErrorMessage"'
            ||',"value": "'||r_vld.ERRORMESSAGE||'"'
            ||',"custParameter": [';
          PIPE ROW(out_rec);
          for r_vldpam in (
              select PARAMETERVALUE, PARAMETERSEQUENCE
              from NPFEPARAMTYPEVLDPARAMVALUE
              where
                IDNPFEVALIDATION = r_vld.IDNPFEVALIDATION and
                IDNPFEPAYMENTPARAMTYPE = r_prop.IDNPFEPAYMENTPARAMTYPE
              order by PARAMETERSEQUENCE)
          loop
            out_rec := '"'||r_vldpam.PARAMETERVALUE||'",';
            PIPE ROW(out_rec);
          end loop;
          out_rec := 'null]},';
          PIPE ROW(out_rec);
        end loop SMVALIDATIONS;
        out_rec := 'null]},';
        PIPE ROW(out_rec);
      end loop SMPROPERTIES;
      out_rec := 'null]}]';
      PIPE ROW(out_rec);
      
      out_rec := ', "ListOfAdditionalPartialViewMetrics": [';
      PIPE ROW(out_rec);
      
      for r_met in (
          select pv.name, addpvm.GRIDROWNUM, 1 GRIDCOLUMNNUM, 12 UNITCOUNT, addpvm.SELECTOPTIONLISTSQL
          from
            NPFE.NPFEADDITIONALCONFIGURATION addc,
            NPFE.NPFEADDITIONALPVMETRICS addpvm,
            NPFE.NPFEPARTIALVIEW pv
          where
            addc.IDNPFEPAYMENTMODEL = lPayModelId and
            addc.IDREASON1 = pAddConfigReasonID1 and
            (pAddConfigReasonID2 is null or addc.IDREASON2 = pAddConfigReasonID2) and
            addpvm.IDNPFEADDITIONALCONFIGURATION = addc.IDNPFEADDITIONALCONFIGURATION and
            pv.IDNPFEPARTIALVIEW = addpvm.IDNPFEPARTIALVIEW)
      loop
        out_rec :=
          '{"Name": "'||r_met.name||'Metric"'
          ||',"pairedWith": "'||r_met.name||'"'
          ||',"Type": '||nvl('"'||r_met.name||'"', 'null');
        PIPE ROW(out_rec);
        if r_met.SELECTOPTIONLISTSQL is not null then
          out_rec := ',"SelectOptionQuery": "'||r_met.SELECTOPTIONLISTSQL||'"';
          PIPE ROW(out_rec);
        end if;
        out_rec :=
          ',"RowNumber": '||to_char(r_met.GRIDROWNUM)
          ||',"ColumnNumber": '||to_char(r_met.GRIDCOLUMNNUM)
          ||',"UnitCount": '||to_char(r_met.UNITCOUNT)
          ||'},';
          PIPE ROW(out_rec);
      end loop;
      out_rec := 'null]';
      PIPE ROW(out_rec);
    end if; 
    

    out_rec := ', "ListOfTranslationObjects": [';
      PIPE ROW(out_rec);
    declare
      pTranslations             SYS_REFCURSOR;
      pResponseCode             number;
      pInternalResponseMessage  varchar2(4000);
      pResponseMessage          varchar2(4000);
      lName                     varchar2(100);
      lValue                    varchar2(4000);
    begin
      
      npfesitedata.GetPageTranslations(
        pIDMMWebsite,
        lPageId,
        pDeviceType,
        pTranslations,
        pResponseCode,
        pInternalResponseMessage,
        pResponseMessage);
      
      if pTranslations is not null then
        loop
          fetch pTranslations
          into lName, lValue;
          exit when pTranslations%NOTFOUND;
          out_rec :=
            '{"TranslationParameter":"'||lName||'"'
            ||',"ControlAssociatedWith": null'
            ||',"Value": "'||json_escape(lValue)||'"'
            ||'},';
          PIPE ROW(out_rec);
        end loop;
      end if;
    end;
    out_rec :=
      'null]'
      ||', "ListOfCSSObjects": [';
    PIPE ROW(out_rec);
    for r_less in (
      select n.name name, NVL(m.value,n.value) value
      from npfewebstyles n
      left join NPFE.NPFEWEBSTYLESMETHOD m
        on (m.DEVICETYPE = n.DEVICETYPE and m.IDMMWEBSITE = n.IDMMWEBSITE and m.PROJECTCLASS = n.PROJECTCLASS and m.NAME = n.NAME and m.idmmpaymentmethod = pPaymentMethod)
      where
        n.IDMMWEBSITE = pIDMMWebsite and
        n.DEVICETYPE = lUseDeviceType and
        n.PROJECTCLASS = pProjectClass)
    loop
      out_rec :=
        '{"LessParameter": "'||r_less.name||'"'
        ||',"ControlAssociatedWith": null'
        ||',"Value": "'||json_escape(r_less.value)||'"'
        ||'},';
      PIPE ROW(out_rec);
    end loop;
    out_rec := 'null]}';
    PIPE ROW(out_rec);
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20100, 'Unhandled error:'||sqlerrm);
  END GetPageDataPL;

  FUNCTION GetPageDataPL2(
      pIDMMWebsite        IN  number,
      pDeviceType         IN  varchar2,
      pTxnType            IN  varchar2,
      pPaymentMethod      IN  varchar2,
      pPaymentProvider    IN  varchar2,
      pProjectClass       IN  varchar2 default 'NP',
      pAddConfigReasonID1 IN  varchar2 default null,
      pAddConfigReasonID2 IN  varchar2 default null
  )
  return NPFEStringSet
  pipelined
  IS
    out_rec varchar2(4000);
    lPayModelId varchar2(10);
    lFormId number;
    lFormName varchar2(50);
    lPageId number;
    lControlName varchar2(100);
    lIDNPFEPartialViewControl number;
    lUseDeviceType varchar2(2);
    lHaveSubmodel number(1);
    lnUdba number;
    lRowNum number;
    
    function json_escape(str in varchar2) return varchar2
    is
    begin
      return(replace(replace(str, '\', '\\'), '"', '\"'));
    end;
  BEGIN
    udbash.LogEntry(
      lnUdba, 10,
      'NPFE', 
      'Package', 
      'GetPageDataPL', 
      0, 
      ';pIDMMWebsite='||pIDMMWebsite
      ||';pDeviceType='||pDeviceType
      ||';pTxnType='||pTxnType
      ||';pPaymentMethod='||pPaymentMethod
      ||';pPaymentProvider='||pPaymentProvider
      ||';pProjectClass='||pProjectClass
      ||';pAddConfigReasonID1='||pAddConfigReasonID1
      ||';pAddConfigReasonID2='||pAddConfigReasonID2
      ,NULL, 
      NULL 
    );
    
    begin
      select IDNPFEPAYMENTMODEL, NVL(HAVESUBMODEL,0)
      into lPayModelId, lHaveSubmodel
      from NPFEPAYMENTMODEL
      where
        IDMMPAYMENTMETHOD = pPaymentMethod and
        (
          (IDMMPAYMENTPROVIDER=pPaymentProvider) or
          (IDMMPAYMENTPROVIDER is null and pPaymentProvider is null)
        ) and
        TXTYPE = pTxnType;
    exception
      when no_data_found then
        raise_application_error(-20010, 'The payment model for given input parameters does not exists.');
        return;
    end;
    
    begin
      select IDNPFEWEBPAGE
      into lPageId
      from NPFEWEBPAGE
      where
        IDNPFEPAYMENTMODEL = lPayModelId;
    exception
      when no_data_found then
        raise_application_error(-20020, 'The web page for given input parameters does not exists.');
        lPageId := null;
    end;
    
    if pProjectClass = 'RSWEB' then
      lUseDeviceType := 'M';
    else
      lUseDeviceType := pDeviceType;
    end if;
    
    begin
      select IDNPFEFORM, FECLASS
      into lFormId, lFormName
      from NPFEFORM
      where
        IDNPFEPAYMENTMODEL = lPayModelId and
        IDMMWEBSITE = pIDMMWebsite and
        DEVICETYPE = lUseDeviceType;
    exception
      when no_data_found then
        raise_application_error(-20030,
          'The web form definition for PAYMENTMODEL='||lPayModelId
          ||';WEBSITE='||to_char(pIDMMWebsite)
          ||';DEVICETYPE='||lUseDeviceType
          ||' does not exists.');
        return;
    end;
    
    out_rec := '{"ListOfPartialViewModels": [';
    PIPE ROW(out_rec);
    
    out_rec := '{"Name": "'||lFormName||'", "ListOfProperties": [';
    PIPE ROW(out_rec);
    <<PROPERTIES>>
    for r_prop in (
        select
          pmp.IDNPFEPAYMENTMODELPARAM, pmp.IDNPFEPAYMENTPARAMTYPE,
          pmp.PPPARAMETERNAME, pmp.SOURCENAME,
          decode(pmp.ISPROVIDEDBYUSER, 1, pmp.SOURCENAME, null) PVNAME,
          pmp.ISSECURE, pmp.KEYPARAMETERNAME,
          pmp.FEVALIDATIONACTION, null isrequired
        from
          NPFEPAYMENTMODELPARAM pmp
        where
          pmp.IDNPFEPAYMENTMODEL = lPayModelId and
          pmp.SOURCENAME is not null
        union
        select
          null IDNPFEPAYMENTMODELPARAM, addpvm.IDNPFEPAYMENTPARAMTYPE,
          addpvm.PPPARAMETERNAME, pv.name sourcename,
          pv.name pvname,
          0 issecure, '' keyparametername,
          addpvm.FEVALIDATIONACTION, addpvm.ISREQUIRED
        from
          NPFE.NPFEADDITIONALCONFIGURATION addc,
          NPFE.NPFEADDITIONALPVMETRICS addpvm,
          NPFE.NPFEPARTIALVIEW pv
        where
          addc.IDNPFEPAYMENTMODEL = lPayModelId and
          
          addc.IDREASON1 = pAddConfigReasonID1 and
          
          (pAddConfigReasonID2 is null or addc.IDREASON2 = pAddConfigReasonID2) and
          addpvm.IDNPFEADDITIONALCONFIGURATION = addc.IDNPFEADDITIONALCONFIGURATION and
          pv.IDNPFEPARTIALVIEW = addpvm.IDNPFEPARTIALVIEW
    )
    loop
      out_rec :=
        '{"Name": "'||r_prop.SOURCENAME||'"'
        ||',"ProviderParameterName": "'||r_prop.PPPARAMETERNAME||'"'
        ||',"PairedWithControl": "'||r_prop.PVNAME||'"';
      if r_prop.ISSECURE = 1 then
        out_rec := out_rec ||',"IsSecure": true, "SecureKeyParameterName": "'||r_prop.KEYPARAMETERNAME||'"';
      elsif r_prop.ISSECURE = 0 then
        out_rec := out_rec ||',"IsSecure": false, "SecureKeyParameterName": "'||r_prop.KEYPARAMETERNAME||'"';
      end if;
      out_rec := out_rec ||',"ListOfValidations": [';
      PIPE ROW(out_rec);
      <<VALIDATIONS>>
      for r_vld in (
          select
            V.FEATTRIBUTETYPE, V.IDNPFEVALIDATION, V.ERRORMESSAGE, 1 vldtype
          from
            NPFEVALIDATION v,
            NPFEPARAMTYPEVALIDATION ptv
          where
            PTV.IDNPFEVALIDATION = V.IDNPFEVALIDATION and
            PTV.IDNPFEPAYMENTPARAMTYPE = r_prop.IDNPFEPAYMENTPARAMTYPE
          union
          select
            V.FEATTRIBUTETYPE, V.IDNPFEVALIDATION, V.ERRORMESSAGE, 2 vldtype
          from
            NPFEVALIDATION v,
            NPFEPayModelParamValidation pmpv
          where
            v.IDNPFEVALIDATION = pmpv.IDNPFEVALIDATION and
            pmpv.IDNPFEPAYMENTMODELPARAM = r_prop.IDNPFEPAYMENTMODELPARAM
          union
          select
            V.FEATTRIBUTETYPE, V.IDNPFEVALIDATION, V.ERRORMESSAGE, 1 vldtype
          from
            NPFEVALIDATION v
          where
            V.NAME = 'REQUIRED' and
            r_prop.ISREQUIRED = 1
      )
      loop
        out_rec :=
          '{"actionName": "'||r_prop.FEVALIDATIONACTION||'"'
          ||',"attributeType": "'||r_vld.FEATTRIBUTETYPE||'"'
          ||',"key": "ErrorMessage"'
          ||',"value": "'||r_vld.ERRORMESSAGE||'"'
          ||',"custParameter": [';
        PIPE ROW(out_rec);
        
        for r_vldpam in (
            select PARAMETERVALUE, PARAMETERSEQUENCE
            from NPFEPARAMTYPEVLDPARAMVALUE
            where
              IDNPFEVALIDATION = r_vld.IDNPFEVALIDATION and
              IDNPFEPAYMENTPARAMTYPE = r_prop.IDNPFEPAYMENTPARAMTYPE and
              r_vld.vldtype = 1
            union
            select PARAMETERVALUE, PARAMETERSEQUENCE
            from NPFEPAYMODELPARAMVLDPARAMVALUE
            where
              IDNPFEVALIDATION = r_vld.IDNPFEVALIDATION and
              IDNPFEPAYMENTMODELPARAM = r_prop.IDNPFEPAYMENTMODELPARAM and
              r_vld.vldtype = 2
            order by PARAMETERSEQUENCE
        )
        loop
          out_rec := '"'||r_vldpam.PARAMETERVALUE||'",';
          PIPE ROW(out_rec);
        end loop;
        out_rec := 'null]},';
        PIPE ROW(out_rec);
      end loop VALIDATIONS;
      out_rec := 'null]},';
      PIPE ROW(out_rec);
    end loop PROPERTIES;
    out_rec := 'null]}]';
    PIPE ROW(out_rec);
    
    out_rec := ', "ListOfPartialViewMetrics": [';
    PIPE ROW(out_rec);
    
    for r_met in (
        select
          PV.name, FPV.GRIDCOLUMNNUM, FPV.GRIDROWNUM, FPV.UNITCOUNT, FPV.SELECTOPTIONLISTSQL
        from
          NPFEFORMPVMETRICS fpv,
          NPFEPARTIALVIEW pv
        where
          FPV.IDNPFEPARTIALVIEW = PV.IDNPFEPARTIALVIEW and
          FPV.IDNPFEFORM = lFormId
        union
        select
          pv.name, 1 GRIDCOLUMNNUM, addpvm.GRIDROWNUM, 12 UNITCOUNT, addpvm.SELECTOPTIONLISTSQL
        from
          NPFE.NPFEADDITIONALCONFIGURATION addc,
          NPFE.NPFEADDITIONALPVMETRICS addpvm,
          NPFE.NPFEPARTIALVIEW pv
        where
          addc.IDNPFEPAYMENTMODEL = lPayModelId and
          addc.IDREASON1 = pAddConfigReasonID1 and
          (pAddConfigReasonID2 is null or addc.IDREASON2 = pAddConfigReasonID2) and
          addpvm.IDNPFEADDITIONALCONFIGURATION = addc.IDNPFEADDITIONALCONFIGURATION and
          pv.IDNPFEPARTIALVIEW = addpvm.IDNPFEPARTIALVIEW
    )
    loop
      out_rec :=
        '{"Name": "'||r_met.name||'Metric"'
        ||',"pairedWith": "'||r_met.name||'"'
        ||',"Type": '||nvl('"'||r_met.name||'"', 'null');
      PIPE ROW(out_rec);
      if r_met.SELECTOPTIONLISTSQL is not null then
        out_rec := ',"SelectOptionQuery": "'||r_met.SELECTOPTIONLISTSQL||'"';
        PIPE ROW(out_rec);
      end if;
      out_rec :=
        ',"RowNumber": '||to_char(r_met.GRIDROWNUM)
        ||',"ColumnNumber": '||to_char(r_met.GRIDCOLUMNNUM)
        ||',"UnitCount": '||to_char(r_met.UNITCOUNT)
        ||'},';
        PIPE ROW(out_rec);
    end loop;
    out_rec := 'null]';
    PIPE ROW(out_rec);
    out_rec := ', "ListOfTranslationObjects": [';
      PIPE ROW(out_rec);
    declare
      pTranslations             SYS_REFCURSOR;
      pResponseCode             number;
      pInternalResponseMessage  varchar2(4000);
      pResponseMessage          varchar2(4000);
      lName                     varchar2(100);
      lValue                    varchar2(4000);
    begin
      
      npfesitedata.GetPageTranslations(
        pIDMMWebsite,
        lPageId,
        pDeviceType,
        pTranslations,
        pResponseCode,
        pInternalResponseMessage,
        pResponseMessage);
      
      if pTranslations is not null then
        loop
          fetch pTranslations
          into lName, lValue;
          exit when pTranslations%NOTFOUND;
          out_rec :=
            '{"TranslationParameter":"'||lName||'"'
            ||',"ControlAssociatedWith": null'
            ||',"Value": "'||json_escape(lValue)||'"'
            ||'},';
          PIPE ROW(out_rec);
        end loop;
      end if;
    end;
    out_rec :=
      'null]'
      ||', "ListOfCSSObjects": [';
    PIPE ROW(out_rec);
    for r_less in (
      select n.name name, NVL(m.value,n.value) value
      from npfewebstyles n
      left join NPFE.NPFEWEBSTYLESMETHOD m
        on (m.DEVICETYPE = n.DEVICETYPE and m.IDMMWEBSITE = n.IDMMWEBSITE and m.PROJECTCLASS = n.PROJECTCLASS and m.NAME = n.NAME and m.idmmpaymentmethod = pPaymentMethod)
      where
        n.IDMMWEBSITE = pIDMMWebsite and
        n.DEVICETYPE = lUseDeviceType and
        n.PROJECTCLASS = pProjectClass)
    loop
      out_rec :=
        '{"LessParameter": "'||r_less.name||'"'
        ||',"ControlAssociatedWith": null'
        ||',"Value": "'||json_escape(r_less.value)||'"'
        ||'},';
      PIPE ROW(out_rec);
    end loop;
    out_rec := 'null]}';
    PIPE ROW(out_rec);
  EXCEPTION
    WHEN OTHERS THEN
      raise_application_error(-20100, 'Unhandled error:'||sqlerrm);
  END GetPageDataPL2;

END NPFESITEDATA;
